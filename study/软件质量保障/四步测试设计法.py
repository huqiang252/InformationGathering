#!/usr/bin/env python
# -*- coding: utf-8 -*-
# @Author  : qiang.hu
# @Time: 2024-06-25

##1.测试点分类
'''
在使用四步测试方法之前，我们首先要对测试点进行分类。分类的依据，就是看测试点是否有“流程”类的特征、“参数”类的特征、“数据”类的特征、“组合”类的特征


1.流程类测试点有哪些特征



有时候，一个测试点可能只能绘出一个流程片段，我们可以把与此相关的测试点放到一起，使其能够表示一个较为完整的流程。

在分析测试点之前，我们先来了解一下“PC连接WiFi”的业务流程（这里只是为了举例说明测试设计的方法，并不是真正的PC连接WiFi的流程，而是一个简化的版本）。
第一步，选择WiFi网络：PC会先判断首选的WiFi网络是否可用，如果不可用，就判断备选WiFi是否可用。
第二步，判断WiFi是否需要加密：PC会判断连接的WiFi是否需要加密。
第三步，连接网络：如果需要加密，就加密后再连接；如果不需要加密，就直接连接网络。

从测试点的描述来看，测试点1和测试点2描述的是选择WiFi网络，测试点3和测试点4描述的是判断WiFi是否需要加密和连接网络。测试点1~测试点4每个测试点都描述了“PC连接WiFi”的一些操作步骤，共同描述了整个流程，它们属于“流程”类的测试点，并且在测试设计的时候，需要把这4个测试点放在一起进行分析。

2.参数类测试点有哪些特征

参数类的测试点有以下两个重要的特点：
第一，“参数值”的个数是有限的，可以通过遍历的方式来测试覆盖到；
第二，系统会对不同的“参数值”作出不同的处理或响应。
理解这两个特点，能够帮助我们区分参数类和数据类（下一节就会讲到）测试点。

前面我们已经分析出测试点1~测试点4属于流程类测试点，而测试点5，主要是从“支持的配置参数”这个角度去描述的，其中“设置加密的WiFi网络的加密算法”就是参数，WEP、WPA和WPA2就是它的参数值，“测试点5”属于参数类的测试点


需要特别指出的是，测试点5和测试点1~测试点4是存在一定的内在关系的：

测试点5要想测试成功，需要保证“首选WiFi网络”或者“备选WiFi网络”至少有一个可用，换句话说，测试点1或者测试点2是测试点5的测试条件。

我们在测试设计的时候，将测试点1~测试点4和测试点5分开来考虑的原因是，我们希望通过对测试点1~测试点4设计测试用例，来测试验证“PC连接WiFi”的连接流程的正确性，而不关注使用的是怎样的加密算法；对测试点5设计测试用例，来测试验证每个加密算法在实现上的正确性，而不关注对流程的覆盖。通过这样的归类，我们的测试变得很聚焦，突出了测试重点，弱化了我们不太关心的地方，同时也能减少测试设计的复杂性。


3.数据类测试点有哪些特征

和“参数”类相比，“数据”类的特点是：
第一，数据的取值是一个范围，通常不能用遍历的方式来测试覆盖。
第二，系统对允许输入的“数据”作出的处理或响应往往是一样的。





我们先来看测试点3。测试点3描述了WiFi网络名称的长度范围和命名限制，满足前面我们讨论的数据类测试点的特点，属于数据类。
对测试点1和测试点2而言，它们描述的是修改WiFi网络名称的条件。
条件1：通过WiFi的管理口直接登录到WiFi上去修改。
条件2：PC连接成功后，可以登录到WiFi上去修改（即通过WiFi的业务口去修改）。
它们不能脱离开测试点3而单独存在。因此，测试点1和测试点2需要与测试点3放在一起考虑，将它们整体归属为数据类。


4.组合类测试点有哪些特征

测试点是可以“组合”的。在测试设计时，我们可以把流程类、数据类和参数类的测试点组合在一起进行测试设计。为了和前面的测试点类型对应，我们称这种需要放在一起进行测试设计的测试点为“组合”类测试点。


分析“PC连接WiFi”功能的测试点

在参数类测试点分析举例的时候，我们就提到能够将测试点1~测试点5放在一起考虑，把它们放一起就构成了“组合”类的测试点。

我们将测试点1~测试点4和测试点5分开来考虑，是为了能够分别验证“PC连接WiFi”的连接流程的正确性和每个加密算法在实现上的正确性。这样设计出来的测试用例也会更关注设计，更关注功能在实现上的细节，在测试时也能比较多地发现这些方面的问题。

如果我们将测试点1~测试点5组合在一起考虑，更多的是站在系统的角度上来进行测试，能够测试到各个功能之间的配合和与系统整体相关的一些问题。


'''



##2.四步测试设计法
'''
建模---> 设计基础测试用例 --->补充测试数据 --->扩展


第一步：建模。

根据测试点的特征，为测试点选择一个适合后续测试设计的模型。也许我们称这个步骤为“选模”更为贴切。

类型1：“流程”；
类型2：“参数”；
类型3：“数据”；
类型4：“组合”。
对每一类测试点，我们都给出了一些最适合的“建模”方法：
·对“流程”类，可以通过绘制“流程图”来建立测试模型。
·对“参数”类，可以通过“输入输出表”来建立测试模型。
·对“数据”类，可以通过“等价类分析表”来建立测试模型。
·对“组合”类，可以通过“因子表”来建立测试模型。


“建模”帮我们解决了面对众多测试方法的选择性难题，使得测试设计变得很有针对性，科学又有效




第二步：设计基础测试用例。


    为什么我们称此时的测试用例为基础测试用例呢？测试用例和基础测试用例最大的差别在于，测试用例确定了测试条件（类似“在××情况下，进行××的测试”的描述）和测试数据（就是输入的“参数值”或“数值”），而基础测试用例只确定了测试条件。


    由于此时我们关心的仅是对模型的覆盖，得到的是一些测试条件，因此我们称此时的测试用例是基础测试用例。
对有些测试设计方法来说，可以在覆盖模型的同时确定测试数据，这时得到的就是测试用例，当然这样我们也不再需要进行第三步了。但是为了统一起见，我们还是称这个步骤为“设计基础测试用例”。


第三步：补充测试数据。

在这个步骤中，我们为基础测试用例来确定测试输入，补充测试数据，这时基础测试用例就升级成真正的测试用例了。


第四步：扩展。

模型不是银弹，不能解决测试设计的所有问题。我们还需要根据经验，特别是对系统哪些地方容易发生缺陷的认识，补充一些测试用例，增加系统的有效性。--错误推测法



'''