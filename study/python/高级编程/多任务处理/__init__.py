#!/usr/bin/env python
# -*- coding: utf-8 -*-
# @Author  : qiang.hu
# @Time: 2024-06-24
'''
参照：https://python.tutorial.hogwarts.ceshiren.com/python_programming/v2/L4/tutorial/%E5%A4%9A%E4%BB%BB%E5%8A%A1%E7%BC%96%E7%A8%8B/
多任务编程是指在编程中同时执行多个任务或线程。它可以提高程序的效率和响应能力，同时也可以利用多个处理器或核心的能力

在实际开发中，Python 多任务编程可以通过以下三种形式实现：

线程
进程
协程
多线程是最常见的一种多任务编程技术，它可以在同一个程序内同时运行多个线程，每个线程负责执行不同的任务。多线程编程能够充分利用多核心处理器的性能优势，提高程序的并发能力。然而，多线程编程需要注意线程安全问题，比如访问共享资源时需要使用锁来保证数据的一致性。

另一种常见的多任务编程技术是多进程编程，它可以在操作系统级别同时运行多个独立的进程。每个进程拥有独立的内存空间和资源，可以实现更高的隔离性。

另外，协程也是一种轻量级的多任务编程技术，它可以在同一个线程中实现多个任务的切换和调度。协程通过 yield 语句和生成器函数实现任务的暂停和恢复，避免了线程切换的开销并减少了锁的使用。协程常用于异步编程场景，比如网络编程和IO密集型任务。

总结起来，多任务编程是一种提高程序并发能力和效率的编程技术，可以通过多线程、多进程或协程等方式实现。在选择多任务编程技术时，
需要根据实际需求和情况综合考虑各种因素，比如性能、并发性、开发难度和可维护性等


'''