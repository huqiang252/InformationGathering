#!/usr/bin/env python
# -*- coding: utf-8 -*-
# @Author  : qiang.hu
# @Time: 2024-06-20


#1.工具类
'''
概念： 负责具体实现的类，工具类的对象被业务类的方法调用。  他不主动做事，只在业务类需要他干活的时候干活

工具类的作用：
1. 增加现有的库的功能
2. 简化现有的库的接口


（1）增加库的功能

场景：系统提供的http api采用token鉴权， 但是出于安全考虑,token会每隔15分钟过期

使用封装的RestClient工具类
    可以在每个请求收到响应后，都去检查是否遇到tocken过期问题，如果遇到就用当前tocken调用refresh_tocken接口，然后重新调用刚才出错的接口


(2) 简化库接口
实现一个工具类
    1.可以屏蔽掉其他写法，提供统一且唯一的get请求发送方式
    2.可以非常有效解决维护等各种问题

'''


#2.业务类的使用
'''
业务类主要作用：
    封装现有业务，提供统一的调用入口
    屏蔽工具类的实现细节，让关注业务的读者不用看具体实现
    
封装现有业务
    例如，jenkins有很多功能，我们用jenkins的业务类把这些功能封装成方法。之后不管是哪个角色的用户要用哪个功能，都直接调用jenkins类的对应方法


屏蔽实现细节
    当我们要用jenkins类要实现一些业务的时候，很可能我们不想了解技术细节。比如创建job
    假设jenkins类有一个create_job方法，需要

'''